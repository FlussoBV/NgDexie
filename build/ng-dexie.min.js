/**
 * Angularjs wrapper around Dexie.js an IndexedDB handler
 * @version v0.0.19 - build 2017-01-06
 * @link https://github.com/FlussoBV/NgDexie
 * @license Apache License, http://www.apache.org/licenses/
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngDexie"),function(){"use strict";function a(){function a(){return c}var b=this,c={name:"",debug:!1},d=function(){console.error("NgDexie :: No configuration hook has been set!")};b.setOptions=function(a){c=angular.extend({},c,a)},b.setConfiguration=function(a){d=a},b.$get=["$rootScope","$q","$log","ngDexieUtils",function(c,e,f,g){function h(a){t.close(),t=i(a)}function i(a){var c=new Dexie(a.name);return a.debug&&f.warn("NgDexie :: debug mode enabled"),a.debug&&c.delete().then(function(){f.warn("debug mode :: Database deleted")}),d.call(b,c),c.open().then(function(){c.close(),c.open().then(function(){f.debug("NgDexie :: database is open")})}),c.on("blocked",function(){f.warn("database seems to be blocked")}),c}function j(a,b){var c=e.defer();return t.table(a).get(b).then(c.resolve).catch(c.reject),c.promise}function k(a,b,c){var d=e.defer();return t.table(a).where(b).equals(c).toArray(function(a){angular.isArray(a)&&a.length>0?d.resolve(a[0]):d.reject()}),d.promise}function l(a,d){return angular.isUndefined(a)?t:(angular.isUndefined(d)&&(d=!1),d?c.$apply(function(){a.call(b,t)}):a.call(b,t),t)}function m(a,c){var d=e.defer();return t.transaction("rw",a,function(){c.call(b,t)}).then(function(){d.resolve()}).catch(function(a){d.reject(a)}),d.promise}function n(a){var b=e.defer();return t.table(a).toArray().then(b.resolve).catch(b.reject),b.promise}function o(a,b,c){var d=e.defer();return t.table(a).where(b).equals(c).toArray().then(d.resolve).catch(d.reject),d.promise}function p(a,b){var c=e.defer();return t.table(a).delete(b).then(function(){c.resolve()}).catch(function(a){f.debug("Error while using delete: "+a),c.reject(a)}),c.promise}function q(a,b){var c=e.defer();return t.table(a).put(g.deepClone(b)).then(function(a){c.resolve(a)}).catch(function(a){f.debug("Error while using put: "+a),c.reject(a)}),c.promise}function r(a,b){var c=e.defer();return t.table(a).add(g.deepClone(b)).then(function(a){c.resolve(a)}).catch(function(a){f.debug("Error while using add: "+a),c.reject(a)}),c.promise}function s(a){var b=e.defer();return t.close(),a&&a.call(this,t),t.open().then(function(){b.resolve()}),b.promise}f.debug("NgDexie :: init");var t=i(a());return{getOptions:a,get:j,getByIndex:k,getDb:l,getTransaction:m,list:n,listByIndex:o,remove:p,add:r,put:q,reopen:s,loadDb:h}}]}angular.module("ngdexie",["ngdexie.core","ngdexie.ui"]),angular.module("ngdexie.core",["ngdexie.utils"]),angular.module("ngdexie.core").provider("ngDexie",a)}(),function(){"use strict";function a(){function a(a){var b=Dexie.deepClone(a);return angular.isDefined(b.$$hashKey)&&delete b.$$hashKey,a}function b(a,b,c){var d;return function(){var e=this,f=arguments,g=function(){d=null,c||a.apply(e,f)},h=c&&!d;clearTimeout(d),d=setTimeout(g,b),h&&a.apply(e,f)}}return{deepClone:a,debounce:b}}angular.module("ngdexie.utils",["ngdexie.core"]),angular.module("ngdexie.utils").factory("ngDexieUtils",a)}(),function(){"use strict";function a(a,b,c,d){function e(e,f,g,h){var i=j._getScope(e),k=d.debounce(function(a,b){c.put(a,b)},1e3);return angular.isUndefined(e.$eval(f))?c.get(g,h).then(function(b){a(f).assign(e,b);var d=angular.isObject(b),j=function(a){angular.isDefined(a)&&k(g,a)};i.watchers[f]=e.$watch(f,j,d),i.dbchanges[f]={table:g,key:h,refresh:function(){c.get(g,h).then(function(b){a(f).assign(e,b)})}}}):b.error("Already binded: "+f),this}function f(a,b){var c=j._getScope(a);c.watchers[b](),delete c.watchers[b],delete c.dbchanges[b]}function g(a){j._removeScope(a)}function h(){c.getDb(function(a){a.on("changes",function(a){angular.forEach(a,function(a){i(a.table,a.key)})})})}function i(a,b){angular.forEach(j._scopes,function(c){angular.forEach(c.dbchanges,function(c){c.table===a&&c.key===b&&c.refresh()})})}var j=this;return j._scopes={},j._getScope=function(a){var b="s"+a.$id;return angular.isUndefined(j._scopes[b])&&(j._scopes[b]={watchers:{},dbchanges:{}},a.$on("$destroy",function(){delete j._scopes[b]})),j._scopes[b]},j._removeScope=function(a){var b=j._getScope(a);angular.forEach(b.watchers,function(b,c){f(a,c)});var c="s"+a.$id;delete j._scopes[c]},h(),{bind:e,unbind:f,unbindScope:g}}angular.module("ngdexie.ui",["ngdexie.core"]),angular.module("ngdexie.ui").factory("ngDexieBind",a),a.$inject=["$parse","$log","ngDexie","ngDexieUtils"]}();